// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [sessions, arrowScores];
  late final Shape0 sessions = Shape0(
    source: i0.VersionedTable(
      entityName: 'sessions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 arrowScores = Shape1(
    source: i0.VersionedTable(
      entityName: 'arrow_scores',
      withoutRowId: true,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(session_id, "index")'],
      columns: [_column_6, _column_7, _column_8, _column_9],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get startTime =>
      columnsByName['start_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get arrowsPerEnd =>
      columnsByName['arrows_per_end']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get distance =>
      columnsByName['distance']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get distanceUnit =>
      columnsByName['distance_unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get scoringSystem =>
      columnsByName['scoring_system']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      false,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'PRIMARY KEY AUTOINCREMENT',
      ),
    );
i1.GeneratedColumn<DateTime> _column_1(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'start_time',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<int> _column_2(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'arrows_per_end',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_3(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'distance',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'distance_unit',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'scoring_system',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get sessionId =>
      columnsByName['session_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get index =>
      columnsByName['index']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get scoreId =>
      columnsByName['score_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_6(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'session_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES sessions (id) ON DELETE CASCADE',
      ),
    );
i1.GeneratedColumn<int> _column_7(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'index',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_8(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'score_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<DateTime> _column_9(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'timestamp',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );

final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [sessions, arrowScores];
  late final Shape2 sessions = Shape2(
    source: i0.VersionedTable(
      entityName: 'sessions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_10,
        _column_11,
        _column_12,
        _column_13,
        _column_14,
        _column_15,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 arrowScores = Shape1(
    source: i0.VersionedTable(
      entityName: 'arrow_scores',
      withoutRowId: true,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(session_id, "index")'],
      columns: [_column_6, _column_7, _column_8, _column_9],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get startTime =>
      columnsByName['start_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get roundId =>
      columnsByName['round_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get arrowsPerEnd =>
      columnsByName['arrows_per_end']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get distance =>
      columnsByName['distance']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get distanceUnit =>
      columnsByName['distance_unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get scoringSystem =>
      columnsByName['scoring_system']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isCompetition =>
      columnsByName['is_competition']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'round_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'arrows_per_end',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_12(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'distance',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'distance_unit',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'scoring_system',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_15(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_competition',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_competition" IN (0, 1))',
      ),
    );

final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [sessions, arrowScores];
  late final Shape3 sessions = Shape3(
    source: i0.VersionedTable(
      entityName: 'sessions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_10,
        _column_16,
        _column_12,
        _column_13,
        _column_14,
        _column_15,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 arrowScores = Shape1(
    source: i0.VersionedTable(
      entityName: 'arrow_scores',
      withoutRowId: true,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(session_id, "index")'],
      columns: [_column_6, _column_7, _column_8, _column_9],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get startTime =>
      columnsByName['start_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get roundId =>
      columnsByName['round_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get arrowsPerEnd =>
      columnsByName['arrows_per_end']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get distance =>
      columnsByName['distance']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get distanceUnit =>
      columnsByName['distance_unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get scoringSystem =>
      columnsByName['scoring_system']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isCompetition =>
      columnsByName['is_competition']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'arrows_per_end',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(
    from1To2: from1To2,
    from2To3: from2To3,
    from3To4: from3To4,
  ),
);
